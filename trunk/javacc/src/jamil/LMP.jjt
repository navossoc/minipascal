/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  NODE_CLASS = "SimpleNode2";  static = false;}PARSER_BEGIN(LMP)package jamil;import jamil.tools.AST;import jamil.tools.Report;import jamil.tools.Symbols;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.InputStream;public class LMP{  public static void main(String args [])  {    try    {      final String filename = "../samples/01.lmp";      // Leitura do arquivo
      InputStream in = new FileInputStream(filename);      // Inicializa o compilador
      LMP parser = new LMP(in);      Node tree = parser.inicio();      // Extração e classificação dos tokens
      Report.generate(filename);      // Tabela de símbolos
      Symbols.print();      // Árvore sintática abstrata
      AST.render(tree);    }    catch (FileNotFoundException ex)    {      System.out.println("Arquivo não encontrado");      System.out.println(ex.toString());    }    catch (Exception e)    {      System.out.println("Not OK.");      System.out.println(e.getMessage());    }  }  private void addNode(String value)  {    jjtree.pushNode(new SimpleNode2(value));  }}PARSER_END(LMP)SKIP : /* Caracteres ignorados */{  " " // space
| "\t" // tab
| "\n" // line feed
| "\r" // carriage return
}TOKEN : /* Palavras reservadas */{  < BEGIN : "begin" >| < END : "end" >| < IF : "if" >| < THEN : "then" >| < WHILE : "while" >| < DO : "do" >}TOKEN : /* Símbolos especiais */{  < DOT : "." >  /* Atribuição */| < ASSIGN : ":=" >| < SEMICOLON : ";" >  /* Lógica */| < OPERATOR_GT : ">" >| < OPERATOR_LT : "<" >| < OPERATOR_EQ : "==" >| < OPERATOR_GE : ">=" >| < OPERATOR_LE : "<=" >  /* Expressão */| < LPAREN : "(" >| < RPAREN : ")" >  /* Operador */| < PLUS : "+" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < MOD : "MOD" >}TOKEN :{  /* Identificador */  < IDENTIFICADOR :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >  /* Número */| < NUMERO :    (< DIGIT >)+  | < DOT > (< DIGIT >)+  | (< DIGIT >)+ < DOT > (< DIGIT >)+ >  /* ERs */| < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "a"-"z", "A"-"Z" ] >}// Semântica
Node inicio() :{}{  < BEGIN >  {    addNode("begin");  }  comando() < END >  {    addNode("end");  }  < DOT >  {    addNode(".");  }  {    return jjtThis;  }}void comando() :{}{  (    condicional()  | iterativo()  | atribuicao()  )*}int condicional() :{}{  < IF >  {    addNode("if");  }  condicao() < THEN >  {    addNode("then");  }  (    LOOKAHEAD(2)    atribuicao()  )*  comando() < SEMICOLON >  {    addNode(";");  }  {    return 1;  }}int iterativo() :{}{  < WHILE >  {    addNode("while");  }  condicao() 
  < DO >
  {    addNode("do");  }  (    LOOKAHEAD(2)    atribuicao()  )*  comando() 
  < SEMICOLON >
  {    addNode(";");  }  {    return 2;  }}int atribuicao() :{}{  identificador() < ASSIGN >  {    addNode(":=");  }  (    expressao()  | identificador()  )  (    operador()    (      expressao()    | identificador()    )  )*  < SEMICOLON >  {    addNode(";");  }  {    return 3;  }}void condicao() :{}{  identificador() logica() identificador()}int logica() :{  Token logica;}{  (    logica = < OPERATOR_GT >  | logica = < OPERATOR_LT >  | logica = < OPERATOR_EQ >  | logica = < OPERATOR_LE >  | logica = < OPERATOR_GE >  )  {    addNode(logica.image);  }  {    return 4;  }}int identificador() :{  Token identificador;}{  identificador = < IDENTIFICADOR >  {    addNode(identificador.image);    // Insere o identificador na tabela de símbolos    Symbols.add(identificador.image);  }  {    return 5;  }}int expressao() :{  Token expressao;}{  (    expressao = < NUMERO >    {      addNode(expressao.image);    }  | < LPAREN > expressao() operador() expressao() < RPAREN >  )  {}  {    return 6;  }}int operador() :{  Token operador;}{  (    operador = < PLUS >  | operador = < MULTIPLY >  | operador = < DIVIDE >  | operador = < MOD >  )  {    addNode(operador.image);  }  {    return 7;  }}